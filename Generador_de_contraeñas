<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generador de Contraseñas - HUD Style</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@700&family=Roboto+Mono:wght@400;700&display=swap');
        
        body {
            font-family: 'Roboto Mono', monospace;
            background-color: #020a1a;
            color: #d1d5db;
        }

        .hud-container {
            background-color: rgba(10, 25, 47, 0.85);
            border: 2px solid rgba(56, 189, 248, 0.4);
            box-shadow: 0 0 25px rgba(56, 189, 248, 0.3);
            backdrop-filter: blur(10px);
            clip-path: polygon(0 5%, 5% 0, 95% 0, 100% 5%, 100% 95%, 95% 100%, 5% 100%, 0 95%);
        }

        .hud-title {
            font-family: 'Orbitron', sans-serif;
            color: #67e8f9;
            text-shadow: 0 0 10px rgba(103, 232, 249, 0.7);
        }

        .password-display {
            background: rgba(2, 10, 26, 0.7);
            border: 1px solid rgba(56, 189, 248, 0.5);
            box-shadow: inset 0 0 10px rgba(56, 189, 248, 0.3);
            font-family: 'Roboto Mono', monospace;
            color: #f0f9ff;
        }

        .hud-button {
            font-family: 'Orbitron', sans-serif;
            background: rgba(56, 189, 248, 0.1);
            border: 1px solid #38bdf8;
            color: #38bdf8;
            transition: all 0.3s ease;
            box-shadow: 0 0 5px rgba(56, 189, 248, 0.5);
            clip-path: polygon(10% 0%, 100% 0, 100% 75%, 90% 100%, 0 100%, 0 25%);
        }
        
        .hud-button:hover {
            background: #38bdf8;
            color: #020a1a;
            box-shadow: 0 0 20px rgba(56, 189, 248, 0.8);
        }

        .form-checkbox:checked {
            background-color: #38bdf8;
            border-color: #38bdf8;
            box-shadow: 0 0 10px #38bdf8;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #67e8f9;
            cursor: pointer;
            border-radius: 50%;
            box-shadow: 0 0 10px #67e8f9;
        }

    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4 bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1597733336794-12d05021d510?q=80&w=1974&auto=format&fit=crop');">

    <div class="hud-container p-8 md:p-10 rounded-2xl max-w-2xl w-full flex flex-col items-center text-center">
        
        <h1 class="hud-title text-3xl md:text-4xl font-bold mb-4 uppercase tracking-widest">
            Sistema de Contraseñas
        </h1>
        
        <p class="text-sky-300 mb-8 max-w-md text-sm">
            Protocolo de generación de credenciales seguras.
        </p>
        
        <div class="w-full flex items-center rounded-lg overflow-hidden mb-2">
            <input 
                id="password-output" 
                type="text" 
                readonly 
                class="password-display flex-1 py-4 px-6 text-xl tracking-wider truncate focus:outline-none" 
                value="Iniciando generador..."
            />
        </div>
        
        <div class="w-full mb-6 text-left grid grid-cols-2 gap-4 items-center">
             <div>
                <p id="strength-text" class="text-sm font-bold text-sky-400">NIVEL DE AMENAZA: MÍNIMO</p>
                <div class="w-full bg-gray-700/50 h-2 mt-1 flex gap-1">
                    <div id="strength-bar-1" class="h-full bg-gray-500 transition-colors duration-500"></div>
                    <div id="strength-bar-2" class="h-full bg-gray-500 transition-colors duration-500"></div>
                    <div id="strength-bar-3" class="h-full bg-gray-500 transition-colors duration-500"></div>
                </div>
            </div>
            <div class="text-right">
                <p class="text-sm font-bold text-sky-400">ENTROPÍA (BITS)</p>
                <p id="entropy-text" class="text-2xl font-bold text-cyan-300">0.00</p>
            </div>
        </div>
        
        <div class="w-full mb-8 text-left border-t-2 border-b-2 border-sky-500/30 py-6">
            <div class="mb-6">
                <div class="flex items-center justify-between text-sky-300">
                    <label for="length">Longitud de Caracteres:</label>
                    <span id="length-value" class="text-2xl font-bold text-cyan-300">12</span>
                </div>
                <input type="range" id="length" min="8" max="32" value="12" class="w-full h-1 bg-sky-900 rounded-lg appearance-none cursor-pointer mt-2">
            </div>
            
            <div class="grid grid-cols-2 gap-4 text-sky-300">
                <label class="flex items-center gap-3">
                    <input type="checkbox" id="uppercase" checked class="form-checkbox w-5 h-5 bg-transparent border-sky-400 rounded-sm text-sky-400 focus:ring-0">
                    Alfa [A-Z]
                </label>
                <label class="flex items-center gap-3">
                    <input type="checkbox" id="lowercase" checked class="form-checkbox w-5 h-5 bg-transparent border-sky-400 rounded-sm text-sky-400 focus:ring-0">
                    Alfa [a-z]
                </label>
                <label class="flex items-center gap-3">
                    <input type="checkbox" id="numbers" checked class="form-checkbox w-5 h-5 bg-transparent border-sky-400 rounded-sm text-sky-400 focus:ring-0">
                    Numérico [0-9]
                </label>
                <label class="flex items-center gap-3">
                    <input type="checkbox" id="symbols" checked class="form-checkbox w-5 h-5 bg-transparent border-sky-400 rounded-sm text-sky-400 focus:ring-0">
                    Símbolos [@#$]
                </label>
            </div>
        </div>
        
        <button id="generate-button" class="w-full py-4 px-6 text-lg hud-button">
            Generar Clave
        </button>

    </div>

    <script>
        const passwordOutput = document.getElementById('password-output');
        const lengthInput = document.getElementById('length');
        const lengthValueSpan = document.getElementById('length-value');
        const generateButton = document.getElementById('generate-button');
        
        const uppercaseCheckbox = document.getElementById('uppercase');
        const lowercaseCheckbox = document.getElementById('lowercase');
        const numbersCheckbox = document.getElementById('numbers');
        const symbolsCheckbox = document.getElementById('symbols');
        
        const strengthText = document.getElementById('strength-text');
        const entropyText = document.getElementById('entropy-text');
        const strengthBars = [
            document.getElementById('strength-bar-1'),
            document.getElementById('strength-bar-2'),
            document.getElementById('strength-bar-3')
        ];

        const charsets = {
            uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
            lowercase: 'abcdefghijklmnopqrstuvwxyz',
            numbers: '0123456789',
            symbols: '!@#$%^&*()-_+=[]{}|;:,.<>?'
        };

        function calculateEntropy(length, characterPoolSize) {
            if (characterPoolSize === 0) return 0;
            const entropy = length * Math.log2(characterPoolSize);
            return entropy.toFixed(2);
        }

        function updateStrengthIndicator(password, poolSize) {
            const entropy = calculateEntropy(password.length, poolSize);
            entropyText.textContent = entropy;

            let text, colors;
            
            strengthBars.forEach(bar => bar.className = 'h-full bg-gray-500 transition-colors duration-500');
            strengthBars[0].style.width = '33.33%';
            strengthBars[1].style.width = '33.33%';
            strengthBars[2].style.width = '33.33%';


            if (entropy < 40) {
                text = 'NIVEL DE AMENAZA: CRÍTICO';
                colors = ['bg-red-500'];
            } else if (entropy < 70) {
                text = 'NIVEL DE AMENAZA: ALTO';
                colors = ['bg-yellow-500', 'bg-yellow-500'];
            } else {
                text = 'NIVEL DE AMENAZA: BAJO';
                colors = ['bg-green-500', 'bg-green-500', 'bg-green-500'];
            }
            
            strengthText.textContent = text;
            colors.forEach((color, index) => {
                if(strengthBars[index]) {
                   strengthBars[index].classList.remove('bg-gray-500');
                   strengthBars[index].classList.add(color);
                }
            });
        }

        function generatePassword() {
            const length = lengthInput.value;
            let charset = '';
            let poolSize = 0;

            if (uppercaseCheckbox.checked) {
                charset += charsets.uppercase;
                poolSize += 26;
            }
            if (lowercaseCheckbox.checked) {
                charset += charsets.lowercase;
                poolSize += 26;
            }
            if (numbersCheckbox.checked) {
                charset += charsets.numbers;
                poolSize += 10;
            }
            if (symbolsCheckbox.checked) {
                charset += charsets.symbols;
                poolSize += charsets.symbols.length;
            }

            if (charset.length === 0) {
                passwordOutput.value = 'ERROR: DATASET VACÍO';
                updateStrengthIndicator('', 0);
                return;
            }

            let password = '';
            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * charset.length);
                password += charset[randomIndex];
            }

            passwordOutput.value = password;
            updateStrengthIndicator(password, poolSize);
        }

        lengthInput.addEventListener('input', (e) => {
            lengthValueSpan.textContent = e.target.value;
            generatePassword();
        });

        [uppercaseCheckbox, lowercaseCheckbox, numbersCheckbox, symbolsCheckbox].forEach(checkbox => {
            checkbox.addEventListener('change', generatePassword);
        });

        generateButton.addEventListener('click', generatePassword);

        // Initial generation
        window.onload = generatePassword;
    </script>
</body>
</html>

